plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'de.inspire'
version = '0.1'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { url "https://repo.dmulloy2.net/repository/public/" }

    maven { url = uri("https://repo.codemc.io/repository/maven-releases/") }

    maven { url = uri("https://repo.codemc.io/repository/maven-snapshots/") }
}

dependencies {
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.24.3")
    compileOnly("org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT")
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.1.0'
    implementation("org.apache.logging.log4j:log4j-slf4j2-impl:2.24.3")
    implementation("com.github.ben-manes.caffeine:caffeine:3.2.1")

    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

    implementation("com.github.retrooper:packetevents-spigot:2.8.0")
}

tasks {
    runServer {
        minecraftVersion("1.18")
    }
}

tasks.register('buildAndRunServer') {
    group = "server"
    description = "Builds the plugin and runs the server via run.bat"

    dependsOn 'build'

    doLast {
        def batFile = file("run.bat")
        if (!batFile.exists()) {
            throw new GradleException("run.bat not found!")
        }

        println "Launching server..."
        if (System.properties['os.name'].toLowerCase().contains('windows')) {
            exec {
                commandLine 'cmd', '/c', batFile.absolutePath
            }
        } else {
            throw new GradleException("This task is intended for Windows (run.bat).")
        }
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
